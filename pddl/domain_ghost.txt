(define (domain domain_ghost)
	
	(:requirements :typing :conditional-effects)

	(:types location)

	(:predicates      (pacmanAt ?p - location) ;; true iff opposite pacman at position p
				(ghostAt ?p - location)	;; true iff ghost at position p
				(connected ?p1 ?p2 ) ;; true iff p1osition1 and position2 are connected
				(scared ?)	;; true iff the pacman has been powered????
				;; scared here????
	)

	(:action move :parameters (?p1 ?p2 -location) ;;move from p1 to p2
				:precondition (and   (ghostAt ?p1)
								     (connected ?p1 ?p2)
							  )
				:effect (and      (ghostAt ?p2)
							      (not (ghostAt ?p1))
							      (when (and (pacmanAt ?p2)
							                 (not (scared))
							            )
									    (not (pacmanAt ?p2))
								  )
							;;scared here???
					    )					
	)

)